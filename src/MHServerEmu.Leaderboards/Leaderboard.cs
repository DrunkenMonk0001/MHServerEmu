using System.Text;
using Gazillion;
using MHServerEmu.Core.Logging;
using MHServerEmu.Core.Network;
using MHServerEmu.DatabaseAccess.Models.Leaderboards;
using MHServerEmu.Games.GameData;
using MHServerEmu.Games.GameData.Prototypes;

namespace MHServerEmu.Leaderboards
{
    public class Leaderboard
    {
        private static readonly Logger Logger = LogManager.CreateLogger();

        private readonly object _lock = new();

        public PrototypeGuid LeaderboardId { get; }
        public LeaderboardPrototype Prototype { get; }
        public List<LeaderboardInstance> Instances { get; } = new();
        public LeaderboardInstance ActiveInstance { get; private set; }
        public bool IsActive { get => ActiveInstance != null && ActiveInstance.State == LeaderboardState.eLBS_Active; }
        public bool CanReset { get => Prototype != null && Prototype.ResetFrequency != LeaderboardResetFrequency.NeverReset; }
        public LeaderboardScheduler Scheduler { get; private set; } = new();

        /// <summary>
        /// Constructs a <see cref="Leaderboard"/> for the provided <see cref="LeaderboardPrototype"/>.
        /// </summary>
        public Leaderboard(LeaderboardPrototype proto, DBLeaderboard dbLeaderboard)
        {
            Prototype = proto;
            LeaderboardId = (PrototypeGuid)dbLeaderboard.LeaderboardId;

            // 2025/05/24 - Removed CanReset check here to allow permanent leaderboards to be included in the enabled leaderboard list
            Scheduler.Initialize(dbLeaderboard);

            var dbManager = LeaderboardDatabase.Instance.DBManager;
            List<DBLeaderboardInstance> instanceList = dbManager.GetInstances(dbLeaderboard.LeaderboardId, proto.MaxArchivedInstances);
            foreach (DBLeaderboardInstance dbInstance in instanceList)
                AddInstance(dbInstance, true);

            if (dbLeaderboard.ActiveInstanceId != 0)
                ActiveInstance = GetInstance((ulong)dbLeaderboard.ActiveInstanceId);
        }

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"LeaderboardId: {LeaderboardId}");
            sb.AppendLine($"Prototype: {Prototype}");
            sb.AppendLine("Instances:");
            foreach (var instance in Instances)
                sb.AppendLine($"  Instance[{instance.InstanceId}]: {instance.State}");

            sb.AppendLine($"ActiveInstance: {(ActiveInstance != null ? ActiveInstance.InstanceId : 0)}");
            sb.AppendLine($"Scheduler: {Scheduler}");
            return sb.ToString();
        }

        /// <summary>
        /// Generates initial instance id for the provided leaderboard <see cref="PrototypeGuid"/>.
        /// </summary>
        /// <remarks>
        /// Further instance ids are generated by incrementing this initial id.
        /// </remarks>
        public static ulong GenerateInitialInstanceId(PrototypeGuid leaderboardId)
        {
            return ((ulong)leaderboardId & 0xFFFFFFFF00000000UL) | 1UL;
        }

        /// <summary>
        /// Changes the current active <see cref="LeaderboardInstance"/> and updates the database.
        /// </summary>
        public bool SetActiveInstance(ulong activeInstanceId, LeaderboardState state, bool savePreviousActiveInstance = false)
        {
            var dbManager = LeaderboardDatabase.Instance.DBManager;
            bool activate = dbManager.UpdateActiveInstanceState((long)LeaderboardId, (long)activeInstanceId, (int)state);

            if (savePreviousActiveInstance && ActiveInstance != null && ActiveInstance.InstanceId != activeInstanceId)
                ActiveInstance.SaveEntries();

            ActiveInstance = GetInstance(activeInstanceId);
            return activate;
        }

        /// <summary>
        /// Initializes a new <see cref="LeaderboardInstance"/> of this <see cref="Leaderboard"/> from the provided <see cref="DBLeaderboardInstance"/>.
        /// </summary>
        public LeaderboardInstance AddInstance(DBLeaderboardInstance dbInstance, bool loadEntries)
        {
            lock (_lock)
            {
                // Early exit if this instance is already initialized
                LeaderboardInstance instance = GetInstance((ulong)dbInstance.InstanceId);
                if (instance != null)
                    return instance;

                instance = new(this, dbInstance);

                if (Prototype.IsMetaLeaderboard)
                    instance.InitMetaLeaderboardEntries(Prototype.MetaLeaderboardEntries);

                // Keep instances sorted in descending order so that the most recent instances appear first.
                // This way when the instance list is queried we can quickly get the current instance + the last archived one.
                Instances.Add(instance);
                Instances.Sort((a, b) => b.InstanceId.CompareTo(a.InstanceId));

                // Remove the oldest instance from runtime data if we are already at cap
                if (Instances.Count > Prototype.MaxArchivedInstances + 1)
                    Instances.RemoveAt(Instances.Count - 1);

                if (loadEntries) 
                    instance.LoadEntries();
                else
                    instance.UpdateCachedTableData();

                if (Prototype.IsMetaLeaderboard)
                    instance.LoadMetaEntries();

                return instance;
            }
        }

        /// <summary>
        /// Returns the <see cref="LeaderboardInstance"/> with the specified id.
        /// </summary>
        public LeaderboardInstance GetInstance(ulong instanceId, bool loadFromDb = false)
        {
            LeaderboardInstance instance = Instances.Find(instance => instance.InstanceId == instanceId);
            if (instance == null && loadFromDb)
            {
                // If not found, this instance may not be loaded from the database
                var dbManager = LeaderboardDatabase.Instance.DBManager;
                DBLeaderboardInstance dbInstance = dbManager.GetInstance((long)LeaderboardId, (long)instanceId);
                if (dbInstance == null)
                    return Logger.WarnReturn(instance, $"GetInstance(): Failed to find instance for id {instanceId}");

                instance = AddInstance(dbInstance, true);
            }

            return instance;
        }

        /// <summary>
        /// Updates the score of the active <see cref="LeaderboardInstance"/>.
        /// </summary>
        public void OnScoreUpdate(ref GameServiceProtocol.LeaderboardScoreUpdate update)
        {
            if (IsActive)
                ActiveInstance.OnScoreUpdate(ref update);
        }

        /// <summary>
        /// Updates the state of all <see cref="LeaderboardInstance">LeaderboardInstances</see> of this <see cref="Leaderboard"/>.
        /// </summary>
        public void UpdateState(DateTime updateTime)
        {
            lock (_lock)
            {
                DBLeaderboardInstance newInstanceDb = null;
                LeaderboardInstance previousInstance = null;
                foreach (LeaderboardInstance instance in Instances)
                {
                    switch (instance.State)
                    {
                        case LeaderboardState.eLBS_Created:

                            if (instance.IsActive(updateTime))
                                instance.SetState(LeaderboardState.eLBS_Active);

                            break;

                        case LeaderboardState.eLBS_Active:

                            if (instance.IsExpired(updateTime))
                            {
                                instance.SetState(LeaderboardState.eLBS_Expired);

                                if (CanReset && newInstanceDb == null && Scheduler.IsEnabled)
                                {
                                    DateTime nextActivationTime = Scheduler.CalcNextUtcActivationDate(instance.ActivationTime, updateTime);
                                    if (nextActivationTime == instance.ActivationTime)
                                        continue;

                                    newInstanceDb = new()
                                    {
                                        InstanceId = (long)NextInstanceId(),
                                        LeaderboardId = (long)LeaderboardId,
                                        State = LeaderboardState.eLBS_Created,
                                        Visible = instance.Visible
                                    };

                                    newInstanceDb.SetActivationDateTime(nextActivationTime);

                                    if (Prototype.IsMetaLeaderboard)
                                        previousInstance = instance;
                                }
                            }
                            else
                            {
                                if (ActiveInstance != instance)
                                {
                                    if (instance.InstanceId > ActiveInstance.InstanceId)
                                    {
                                        SetActiveInstance(instance.InstanceId, LeaderboardState.eLBS_Active, true);
                                    }
                                    else
                                    {
                                        instance.UpdateDBState(LeaderboardState.eLBS_Rewarded);
                                        instance.SetState(LeaderboardState.eLBS_Rewarded);
                                        break;
                                    }
                                }

                                instance.Update();
                            }

                            break;

                        case LeaderboardState.eLBS_Expired:

                            if (CanReset)
                                instance.SetState(LeaderboardState.eLBS_Reward);

                            break;

                        case LeaderboardState.eLBS_Reward:

                            if (instance.SetState(LeaderboardState.eLBS_RewardsPending))
                                if (instance.GiveRewards())
                                {
                                    instance.UpdateDBState(LeaderboardState.eLBS_Rewarded);
                                    instance.SetState(LeaderboardState.eLBS_Rewarded);
                                }

                            break;
                    }
                }

                if (newInstanceDb != null)
                    AddNewInstance(newInstanceDb, previousInstance);
            }
        }

        /// <summary>
        /// Generates a new instance id for this <see cref="Leaderboard"/>.
        /// </summary>
        /// <remarks>
        /// See <see cref="GenerateInitialInstanceId(PrototypeGuid)"/> for how the initial id is generated.
        /// </remarks>
        private ulong NextInstanceId()
        {
            // NOTE: The most recent instance needs to be loaded when this is called.
            return Instances.Max(i => i.InstanceId) + 1;
        }

        /// <summary>
        /// Inserts the provided <see cref="DBLeaderboardInstance"/> into the database.
        /// </summary>
        private void AddNewInstance(DBLeaderboardInstance dbInstance, LeaderboardInstance previousInstance)
        {
            Logger.Info($"AddNewInstance(): {Prototype.DataRef.GetNameFormatted()} {dbInstance.InstanceId}");
            var dbManager = LeaderboardDatabase.Instance.DBManager;
            dbManager.InsertInstance(dbInstance);

            // add new SubInstances
            previousInstance?.AddNewMetaEntries((ulong)dbInstance.InstanceId);

            AddInstance(dbInstance, true);
            OnStateChange((ulong)dbInstance.InstanceId, dbInstance.State);
            SetActiveInstance((ulong)dbInstance.InstanceId, dbInstance.State, true);
        }

        /// <summary>
        /// Notifies the game instance service of a change of state of the specified <see cref="LeaderboardInstance"/>.
        /// </summary>
        public void OnStateChange(ulong instanceId, LeaderboardState state)
        {
            LeaderboardInstance instance = GetInstance(instanceId);
            if (instance == null)
                return;

            var changeMessage = instance.BuildLeaderboardStateChange(state);
            ServerManager.Instance.SendMessageToService(ServerType.GameInstanceServer, changeMessage);
        }

        /// <summary>
        /// Builds <see cref="GameServiceProtocol.LeaderboardStateChange"/> messages for all loaded <see cref="LeaderboardInstance">LeaderboardInstances</see>
        /// and adds them to the provided <see cref="List{T}"/>.</summary>
        public void GetInstanceInfos(List<GameServiceProtocol.LeaderboardStateChange> changeList)
        {
            int maxInstances = Prototype.MaxArchivedInstances;
            foreach (LeaderboardInstance instance in Instances)
            {
                changeList.Add(instance.BuildLeaderboardStateChange());
                if (--maxInstances < 0)
                    break;
            }
        }

        /// <summary>
        /// Loads or updates the <see cref="LeaderboardInstance"/> corresponding to the provided <see cref="DBLeaderboardInstance"/>.
        /// </summary>
        public void RefreshInstance(DBLeaderboardInstance refreshInstance)
        {
            LeaderboardInstance instance = GetInstance((ulong)refreshInstance.InstanceId);

            if (instance == null)
            {
                // Add new instance
                Logger.Info($"RefreshInstance(): Adding new instance {Prototype.DataRef.GetNameFormatted()} {refreshInstance.InstanceId}");

                if (Prototype.IsMetaLeaderboard)
                {
                    // Get the previous instance of this leaderboard (InstanceId - 1)
                    LeaderboardInstance previousInstance = GetInstance((ulong)refreshInstance.InstanceId - 1, true);
                    // add new SubInstances
                    previousInstance?.AddNewMetaEntries((ulong)refreshInstance.InstanceId);
                }

                AddInstance(refreshInstance, false);
                OnStateChange((ulong)refreshInstance.InstanceId, LeaderboardState.eLBS_Created);
            }
            else
            {
                // update Instance
                Logger.Info($"RefreshInstance(): Updating instance {Prototype.DataRef.GetNameFormatted()} {refreshInstance.InstanceId}");

                bool changed = false;

                if (instance.Visible != refreshInstance.Visible)
                {
                    instance.Visible = refreshInstance.Visible;
                    changed = true;
                }

                if (instance.State != refreshInstance.State)
                {
                    instance.State = refreshInstance.State;
                    changed = true;
                }

                DateTime newActivationTime = refreshInstance.GetActivationDateTime();
                if (instance.ActivationTime != newActivationTime)
                {
                    Logger.Info($"RefreshInstance(): Changing ActivationTime {instance.ActivationTime} => {newActivationTime}");
                    instance.ActivationTime = newActivationTime;
                    instance.ExpirationTime = Scheduler.CalcExpirationTime(newActivationTime);
                    changed = true;
                }

                if (changed)
                    OnStateChange(instance.InstanceId, instance.State);
            }
        }
    }
}
